// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String       @id @default(cuid())
  name          String
  lastName      String
  email         String       @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole     @default(USER)
  invoices      Invoice[]
  categories    Category[]
  departments   Department[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  UserRel      User      @relation(fields: [userId], references: [id])
  userId       String
  userOriginal String?
  invoices     Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  type        InvoiceType

  icon      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoices  Invoice[]

  userId       String
  UserRel      User    @relation(fields: [userId], references: [id])
  userOriginal String?

  @@unique([name, type])
}

enum InvoiceType {
  ULAZNI_RACUN
  IZLAZNI_RACUN
}

enum InvoiceStatus {
  NEPLACENO
  PLACENO
  KASNJENJE
  STORNIRANO
}

model Invoice {
  id String @id @default(uuid())

  invoiceNumber String
  netAmount     Float
  vatAmount     Float
  vatRate       Float
  grossAmount   Float
  type          InvoiceType
  description   String?
  dateIssued    DateTime
  datePaid      DateTime?
  status        InvoiceStatus @default(NEPLACENO)

  // Related fields
  categoryId       Int?
  categoryRel      Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryOriginal String? // Pohrani originalnu kategoriju

  departmentId       String?
  departmentRel      Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentOriginal String? // Pohrani originalni department

  userId       String?
  userRel      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userOriginal String? // Pohrani originalnog usera

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MonthHistory {
  day        Int
  month      Int
  year       Int
  income     Float
  expense    Float
  vatPaid    Float
  vatOwed    Float
  vatBalance Float

  @@id([day, month, year])
}

model YearHistory {
  month      Int
  year       Int
  income     Float
  expense    Float
  vatPaid    Float
  vatOwed    Float
  vatBalance Float

  @@id([month, year])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
